from vmpw_livecoding_helpers import *

def addToGlobs(module):
    for key in dir(module):
        globals()[key]=getattr(module,key)    

def r2g(module):
    import importlib as il
    il.reload(module)
    addToGlobs(module)

def reload():
    import monitor as rvm
    r2g(rvm)
    import App.utils.logger as rvlog
    r2g(rvlog) 
    import zmq
    #globals['zmq']
    globals()['zmqc']=zmq.Context()

reload();  rp = rv_MonitorableRepeatable(exlocals=locals())

import zmq
zContext=zmq.Context()
sc=zContext.socket(zmq.PAIR)
rc=zContext.socket(zmq.PAIR)
rc.bind('inproc://hello')
sc.connect('inproc://hello')
sc.send_string('oi oi')

print( self.r_socket )
print( self.name )


#Init
zmq = exlocals['zmq']
zmqContext = exlocals['zmqContext']

self.r_socket=zmqContext.socket(zmq.PAIR)
self.r_socket.bind("inproc://{0}_WidgetLogSock".format(self.name))

#Test
for i in range(25):
	if (self.r_socket.poll( timeout=100 )):
		print(self.r_socket.recv_string()
	else:
		print("timedout")

#LogTestLoop
def loop(self):
	self.initializeFromCode()
	import time
	for i in range(1000):
		time.sleep(0.1)
		print(  self.loginfo(i) )
threading.Thread(target=loop,args=(self,)).start()

# numpy image visualizer
cvrp.widget.image=QLabel()
cvrp.widget.image.setScaledContents(True)

#self.widget.stateView=QLabel()
imdata=np.random.random((1048,1048,3))
self.imdata=imdata
self.im=QImage(imdata,imdata.shape[1],imdata.shape[0],QImage.Format_RGB32)
self.pxm=QPixmap.fromImage(self.im)
self.widget.stateView.setPixmap(self.pxm)
#self.widget.stateView.show()

##Init Vid Cap
import cv2

#Run Captureself.imdata=self.vid.read()[1]
imdata=self.imdata
self.im=QImage(imdata,imdata.shape[1],imdata.shape[0],QImage.Format_RGB888)
self.pxm=QPixmap.fromImage(self.im)
self.widget.stateView.setPixmap(self.pxm)